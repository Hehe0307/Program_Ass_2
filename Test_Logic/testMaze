#include <iostream>

using namespace std;

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <iomanip>

using namespace std;

const int dist_thresh = 5;
const int ROWS = 26;
const int COLS = 26;

int maze[ROWS][COLS] = {};

bool isValid(int r, int c)
{
    return (r >= 0 && r < ROWS && c >= 0 && c < COLS && maze[r][c] == 0);
}

void initialiseMaze()
{

maze[12][12] = 3;
maze[12][13] = 3;
maze[13][13] = 3;
maze[13][12] = 3;

//Initialise maze[i][0], maze[i][25]
for(int i = 0; i < 26; i++)
{
    int j = 0;
    maze[i][j] = 1;

    int col = 25;
    maze[i][col] = 1;
}

//Initialise maze[0][j], maze[25][j]
for(int j = 0; j < 26; j++)
{
    int i = 0;
    maze[i][j] = 1;

    int row = 25;
    maze[row][j] = 1;
}
}

void exploreMaze()
{
    static int r = 25;
    static int c = 1;

    //Initial position
    int postion = maze[r][c];

    while(maze[r][c] != 1)
    {
        if(Front.retrieveData() < dist_thresh)
        {
             maze[r + 1][c] = 1;
        }

        if(Right.retrieveData() < dist_thresh)
        {
             maze[r][c + 1] = 1;
        }

        if(Left.retrieveData() < dist_thresh)
        {
             maze[r][c - 1] = 1;
        }

        while(maze[r][c] != 3)
        {
            if (Front.retrieveData() > dist_thresh && Right.retrieveData() > dist_thresh && Left.retrieveData() > dist_thresh) { // no obstacles ahead
            LeftWheel.moveForward();
            RightWheel.moveForward();
            r--;
            // Serial.println("Forward");
            // delay(100);
        }

            else if ( Front.retrieveData() > dist_thresh && Right.retrieveData() < dist_thresh && Left.retrieveData() < dist_thresh) { // left & right have obstacles but front is clear
            LeftWheel.moveForward();
            RightWheel.moveForward();
            r--;
            // Serial.println("Forward");
            // delay(100);
        }
            else if ( Front.retrieveData() < dist_thresh && Right.retrieveData() < dist_thresh && Left.retrieveData() < dist_thresh) { // obstacle infront of all 3 sides, reverse
            LeftWheel.moveReverse();
            RightWheel.moveReverse();
            r++
            // Serial.println("Reverse");
            // delay(500);

            if((Left.retrieveData()) > (Right.retrieveData())) {
            LeftWheel.moveLeft();
            RightWheel.moveLeft();
            c--;
            // Serial.println("Left");
            // delay(100);
            }
            else {
            LeftWheel.moveRight();
            RightWheel.moveRight();
            c++;
            // Serial.println("Right");
            // delay(100);
            }
        }
    else if (Front.retrieveData() < dist_thresh && Right.retrieveData() < dist_thresh && Left.retrieveData() > dist_thresh) { // obstacle on right and front sides, turn left side
      LeftWheel.moveLeft();
      RightWheel.moveLeft();
      c--;
      // Serial.println("Left");
      // delay(100);
    }
    else if (Front.retrieveData() < dist_thresh && Right.retrieveData() > dist_thresh && Left.retrieveData() < dist_thresh) { // obstacle on left and front sides, turn right side
      LeftWheel.moveRight();
      RightWheel.moveRight();
      c++;
      // Serial.println("Right");
      // delay(100);
    }

        //r++, c++;
    }
}


//Print maze
void printMaze()
{
    for(int i = 0; i < ROWS; i++)
    {
    for(int j = 0; j < COLS; j++)
    {
        cout << maze[i][j] << " ";
    }
    cout << endl;
    }
}


int main(){

initialiseMaze();

//Initial maze
cout << "Initial maze: " << endl;
printMaze();

exploreMaze();

////up, down, right, left
//int dr[4] = {-1, 1, 0, 0};
//int dc[4] = {0, 0, 1, -1};
//
//    int direction = -1;
//
//    //Tremaux algorithm
//    srand(static_cast<unsigned int>(time(nullptr)));
//
//    // Start exploring maze[11][1]
//    int r = 11;
//    int c = 1;
//
//    // Explore until reaching the center
//    while (maze[r][c] != 3) {
//
//        // Mark the current cell
//        maze[r][c]++;
//
//     // Choose the next direction
//        int nextDir = -1;
//        for (int i = 0; i < 4; ++i) {
//            int newR = r + dr[i];
//            int newC = c + dc[i];
//
//            if (isValid(newR, newC) && maze[newR][newC] == 0 && maze[newR][newC] != 3) {
//                nextDir = i;
//                //break;
//            }
//        }
//
//        // If there's a valid direction, move to the next cell
//        if (nextDir != -1) {
//
//            maze[r][c] = 2;
//            //printMaze();
//
//            r += dr[nextDir];
//            c += dc[nextDir];
//
//            // Update the direction for backtracking
//            direction = nextDir;
//
//        } else {
//            // If there's no valid direction, backtrack
//            r -= dr[direction];
//            c -= dc[direction];
//
//            // Mark the backtracked path
//            maze[r][c]++;
//        }
//}
    return 0;
}
